{"meta":{"title":"XZQ�Ĳ���","subtitle":"Welcome!","description":"��ã���������С����~","author":"�佾����","url":"https://xuziqiangnb.github.io","root":"/"},"pages":[{"title":"All categories","date":"2020-04-18T12:10:59.000Z","updated":"2020-04-18T12:11:54.396Z","comments":true,"path":"categories/index.html","permalink":"https://xuziqiangnb.github.io/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2020-04-18T12:07:42.000Z","updated":"2020-04-18T12:09:33.069Z","comments":true,"path":"tags/index.html","permalink":"https://xuziqiangnb.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-04-17T09:34:47.000Z","updated":"2020-04-17T09:34:47.431Z","comments":true,"path":"2020/04/17/我的第一篇博客文章/","link":"","permalink":"https://xuziqiangnb.github.io/2020/04/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-17T09:30:21.169Z","updated":"2020-04-17T09:30:21.169Z","comments":true,"path":"2020/04/17/hello-world/","link":"","permalink":"https://xuziqiangnb.github.io/2020/04/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"UML六大关系梳理","slug":"UML六大关系","date":"2020-04-16T16:00:00.000Z","updated":"2020-04-17T16:01:11.469Z","comments":true,"path":"2020/04/17/UML六大关系/","link":"","permalink":"https://xuziqiangnb.github.io/2020/04/17/UML%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/","excerpt":"","text":"Unified Modeling Language 类与类关联关系继承（泛化 Generalization）泛化关系实际上就是继承关系，依赖关系的特例。 实现（Realization）实现关系实际上就是 A类 实现 B接口，依赖关系的特例。 对象耦合关系依赖（Dependence）只要是在类中用到了对方，那么他们之间就存在依赖关系。 类中用到了对方； 类的成员属性； 方法的返回类型； 方法接收的参数类型； 方法中使用到。 关联（Association）类与类之间的关系，依赖关系的特例。 关联具有导航性：即双向关系或单向关系。 1234567public class Person &#123; private IDCard idCard;&#125;class IDCard &#123; //private Person person;&#125; 聚合（Aggregation）表示的是整体和部分的关系，整体与部分可以分开，关联关系的特例。 聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。 12345678910111213141516public class Computer &#123; private Mouse mouse; private Keyboard keyboard; public void setMouse(Mouse mouse) &#123; this.mouse = mouse; &#125; public void setKeyboard(Keyboard keyboard) &#123; this.keyboard = keyboard; &#125;&#125;class Mouse &#123;&#125;class Keyboard &#123;&#125; 组合（Composite）整体与部分的关系，但是整体与部分不可以分开，关联关系的特例。 级联删除就是组合关系。 12345678public class Computer &#123; private CPU cpu = new CPU(); private SSD ssd = new SSD();&#125;class CPU &#123;&#125;class SSD &#123;&#125;","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://xuziqiangnb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]}],"categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://xuziqiangnb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]}